// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./output/prisma"
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  // 관계
  carts Cart[]
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // ★ 기본값 추가

  // 관계
  userId String
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt // ★ 기본값 추가

  // 관계
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  maker       String
  description String?
  image       String
  seller      String
  category    String[]
  price       Int
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt // ★ 기본값 추가

  // 관계
  cartItems CartItem[] // 역방향 필드 추가
}

// 스키마수정후 방법1
// 1. 스키마 수정 
// 2. 클라이언트 생성 : npx prisma generate
// 3. 마이그레이션 생성 : npx prisma migrate dev --name update_model
// 4. 시드 데이터 동기화 : npx prisma db seed
// 예외사항 -> 모델에 새로운 필드 추가한 경우 -> not null 제약조건으로 해결불가 -> 기존의 데이터는 새로운 필드가 존재하지 않기 때문에

// 스키마수정후 방법2
// 프리즈마 개발 데이터베이스 리셋
// npx prisma migrate reset
// -> 데이터베이스 드랍
// -> 마이그레이션 적용
// -> 시드 명령 실행 (package.json에 설정된 prisma.seed)
